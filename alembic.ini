# ðŸ“„ File: alembic.ini
#
# ðŸ§­ Purpose (Layman Explanation):
# Configuration file that tells our database migration tool (Alembic) how to
# safely update the database structure when we add new features.
#
# ðŸ§ª Purpose (Technical Summary):
# Alembic configuration for database migrations, schema versioning, and
# database evolution management with environment-specific settings.
#
# ðŸ”— Dependencies:
# - alembic Python package
# - SQLAlchemy models
# - Database connection settings
#
# ðŸ”„ Connected Modules / Calls From:
# - alembic CLI commands
# - Database initialization scripts
# - CI/CD deployment pipelines
# - Development database setup

# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = migrations

# template used to generate migration files
file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version number format
version_num_format = %%04d

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses
# os.pathsep. If this key is omitted entirely, it falls back to the legacy
# behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# Database URL - will be overridden by env.py from environment variables
sqlalchemy.url ="postgresql+asyncpg://postgres:2aeeH*x2GjSa?f@db.jplhpvvcpaqckovxbxvx.supabase.co:5432/postgres"


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 100 REVISION_SCRIPT_FILENAME

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# =============================================================================
# PLANT CARE APPLICATION SPECIFIC SETTINGS
# =============================================================================

[plant_care:migration_settings]
# Custom settings for Plant Care application migrations

# Schema naming conventions
# naming_convention = {
#   "ix": "ix_%(column_0_label)s",
#   "uq": "uq_%(table_name)s_%(column_0_name)s", 
#   "ck": "ck_%(table_name)s_%(constraint_name)s",
#   "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
#   "pk": "pk_%(table_name)s"
# }

# Module-specific migration tracking
track_modules = admin_management,user_management,plant_management,care_management,health_monitoring,growth_tracking,community_social,ai_smart_features,weather_environmental,analytics_insights,notification_communication,payment_subscription,content_management

# Backup settings
backup_before_migration = true
backup_retention_days = 30

# Data seeding
seed_data_path = scripts/seed_data
run_seeds_after_migration = true

[plant_care:admin_settings]
# Admin-specific migration settings
admin_tables_prefix = admin_
create_admin_user_on_init = true
admin_default_email = admin@plantcare.app

[plant_care:multilingual_settings]
# Multilingual support settings
default_language = en
supported_languages = en,hi,es,fr,de,pt,ru,zh,ja,ar
translation_tables_suffix = _translations

[plant_care:api_settings]
# API provider configuration tables
api_provider_config_table = api_providers
api_usage_tracking_table = api_usage_logs
rate_limit_config_table = rate_limit_rules

[plant_care:content_settings]
# Content management settings
content_versioning = true
content_approval_workflow = true
auto_translation = false

[plant_care:analytics_settings]
# Analytics and metrics settings
partition_analytics_by_month = true
retention_period_months = 24
anonymize_after_days = 90

[plant_care:security_settings]
# Security-related migration settings
encrypt_sensitive_fields = true
audit_all_changes = true
soft_delete_user_data = true

# =============================================================================
# ENVIRONMENT SPECIFIC OVERRIDES
# =============================================================================

[development]
# Development environment settings
backup_before_migration = false
run_seeds_after_migration = true
auto_upgrade_on_startup = true

[staging]
# Staging environment settings  
backup_before_migration = true
run_seeds_after_migration = false
require_migration_approval = true

[production]
# Production environment settings
backup_before_migration = true
run_seeds_after_migration = false
require_migration_approval = true
maintenance_mode_during_migration = true
rollback_on_failure = true